-- Enable Row Level Security
ALTER TABLE IF EXISTS public.tokens ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.historical_records ENABLE ROW LEVEL SECURITY;

-- Create tokens table
CREATE TABLE IF NOT EXISTS public.tokens (
    mint TEXT PRIMARY KEY,
    start_market_cap NUMERIC NOT NULL,
    liquidity_usd NUMERIC NOT NULL,
    market_cap_usd NUMERIC NOT NULL,
    cumulative_buy_volume NUMERIC DEFAULT 0,
    cumulative_net_volume NUMERIC DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    last_updated TIMESTAMPTZ DEFAULT NOW(),
    deadline TIMESTAMPTZ NOT NULL
);

-- Create token_hotness table to track when tokens become hot
CREATE TABLE IF NOT EXISTS public.token_hotness (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    token_mint TEXT REFERENCES public.tokens(mint),
    detected_at TIMESTAMPTZ DEFAULT NOW(),
    market_cap_usd NUMERIC NOT NULL,
    start_market_cap NUMERIC NOT NULL,
    liquidity_usd NUMERIC NOT NULL,
    cumulative_buy_volume NUMERIC NOT NULL,
    cumulative_net_volume NUMERIC NOT NULL,
    reason TEXT
);

-- Create index on token_mint and detected_at for faster queries
CREATE INDEX IF NOT EXISTS idx_token_hotness_token_mint_detected_at 
ON public.token_hotness(token_mint, detected_at);

-- Create historical_records table
CREATE TABLE IF NOT EXISTS public.historical_records (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    token_mint TEXT REFERENCES public.tokens(mint),
    timestamp TIMESTAMPTZ DEFAULT NOW(),
    market_cap_usd NUMERIC NOT NULL,
    liquidity_usd NUMERIC NOT NULL,
    cumulative_buy_volume NUMERIC NOT NULL,
    cumulative_net_volume NUMERIC NOT NULL
);

-- Create index on token_mint and timestamp for faster queries
CREATE INDEX IF NOT EXISTS idx_historical_records_token_mint_timestamp 
ON public.historical_records(token_mint, timestamp);

-- RLS Policies
-- Allow anyone to read tokens
CREATE POLICY "Allow public read access to tokens"
    ON public.tokens FOR SELECT
    USING (true);

-- Allow anyone to read historical records
CREATE POLICY "Allow public read access to historical records"
    ON public.historical_records FOR SELECT
    USING (true);

-- Allow authenticated users to insert/update tokens
CREATE POLICY "Allow authenticated users to insert tokens"
    ON public.tokens FOR INSERT
    TO authenticated
    WITH CHECK (true);

CREATE POLICY "Allow authenticated users to update tokens"
    ON public.tokens FOR UPDATE
    TO authenticated
    USING (true)
    WITH CHECK (true);

-- Allow authenticated users to insert historical records
CREATE POLICY "Allow authenticated users to insert historical records"
    ON public.historical_records FOR INSERT
    TO authenticated
    WITH CHECK (true);

-- Create queue tables
CREATE TABLE IF NOT EXISTS public.token_stats_queue (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    message JSONB NOT NULL,
    status TEXT NOT NULL DEFAULT 'pending',
    visible_after TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.token_stats_queue_dlq (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    message JSONB NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable RLS on queue tables
ALTER TABLE IF EXISTS public.token_stats_queue ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.token_stats_queue_dlq ENABLE ROW LEVEL SECURITY;

-- Create policies for queue tables
CREATE POLICY "Enable all access for service role on token_stats_queue"
    ON public.token_stats_queue
    TO service_role
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Enable all access for service role on token_stats_queue_dlq"
    ON public.token_stats_queue_dlq
    TO service_role
    USING (true)
    WITH CHECK (true);
